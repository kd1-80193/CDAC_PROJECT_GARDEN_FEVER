package com.app.config;

package com.app.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import com.app.security.JwtAuthenticationEntryPoint;
import com.app.security.JwtAuthenticationFilter;
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter{

	
	@Autowired
	private CustomUserDetailsService customUserDetailsService;
	public static String[] PUBLIC_URL= {"/auth/login"};
	
	@Autowired
	private JwtAuthenticationFilter filter;
	
	@Autowired
	private JwtAuthenticationEntryPoint entryPoint;
	@Autowired
	private UserDetailsService userDetailsService;
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		 http
		.csrf()
		.disable()
		.authorizeRequests()
		.antMatchers(PUBLIC_URL).permitAll()
		.anyRequest()
		.authenticated()
		.and()
		//.httpBasic();
		.exceptionHandling()
		.authenticationEntryPoint(entryPoint)
		.and()
		.sessionManagement()
		.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
		 
		http.addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class);	
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(this.customUserDetailsService).passwordEncoder(this.passwordEncoder());
	}
	
	//sajal123
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	 @Bean
	    public FilterRegistrationBean<CorsFilter> corsFilter() {
	        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
	        CorsConfiguration configuration = new CorsConfiguration();
	        configuration.setAllowCredentials(true);
	        configuration.addAllowedOriginPattern("*");
	        configuration.addAllowedHeader("Authorization");
	        configuration.addAllowedHeader("Content-Type"); // Add other headers if needed
	        configuration.addAllowedMethod("Accept");
	        configuration.addAllowedMethod("GET");
	        configuration.addAllowedMethod("POST");
	        configuration.addAllowedMethod("PUT");
	        configuration.addAllowedMethod("DELETE");
	        configuration.addAllowedMethod("OPTIONS");
	        configuration.setMaxAge(3600L);
	        source.registerCorsConfiguration("/**", configuration);

	        FilterRegistrationBean<CorsFilter> bean = new FilterRegistrationBean()<>(new CorsFilter(source));
	        bean.setOrder(0); // Set the order to a high value to ensure it's executed early
	        return bean;
	    }
}
